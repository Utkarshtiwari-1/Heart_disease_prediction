# -*- coding: utf-8 -*-
"""Heart_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H21zJ-WmCItXMMFme5Ed5u4Q7N_PKS7e
"""

#importing the dependencies ->libreries and functions
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#data collection and processing
heart_data = pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

#print last five rows
heart_data.tail()

heart_data.shape

#getting some info the data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

#stasitical measusres of data
heart_data.describe()

#checking the distribution of target variables
heart_data['target'].value_counts()

# 1->defective heart
# 0->healthy heart
#splitting the features and target values
X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)
print(Y)

#splitting data into test and traint
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size= 0.2,stratify=Y,random_state=2)
print(X.shape,x_train.shape,x_test.shape)

#model trainning ->logistic regression model for binary classification
model = LogisticRegression()
model.fit(x_train,y_train)

#model evaluation
#accuracy on training data
x_train_prediction = model.predict(x_train)
print(x_train_prediction)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)
print('accuracy on training data :',training_data_accuracy)

#accurecy score on test data
x_test_prediction = model.predict(x_test)
print(x_test_prediction)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)
print('accuracy on test data :',test_data_accuracy)
#

#building a precting system
input_data = (52,1,2,172,199,1,1,162,0,0.5,2,0,3)
#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the numpy array as we aare precting only for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

